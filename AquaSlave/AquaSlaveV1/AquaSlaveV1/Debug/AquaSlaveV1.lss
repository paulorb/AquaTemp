
AquaSlaveV1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000068  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000068  000000dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  000000dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  000007a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  0000083f  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  0000086e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000016b  00000000  00000000  0000088e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000e1  00000000  00000000  000009f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000197  00000000  00000000  00000ada  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  00000c74  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000116  00000000  00000000  00000c98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00000dae  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	02 d0       	rcall	.+4      	; 0x38 <main>
  34:	17 c0       	rjmp	.+46     	; 0x64 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <main>:
#include <avr/io.h>
#include <util/delay.h>

int main(void)
{
	DDRC &= ~(1 << 0);
  38:	a0 98       	cbi	0x14, 0	; 20
    while(1)
    {
        //TODO:: Please write your application code 
		
		
			PORTC &= ~(1 << 0);
  3a:	a8 98       	cbi	0x15, 0	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  3c:	2f e9       	ldi	r18, 0x9F	; 159
  3e:	86 e8       	ldi	r24, 0x86	; 134
  40:	91 e0       	ldi	r25, 0x01	; 1
  42:	21 50       	subi	r18, 0x01	; 1
  44:	80 40       	sbci	r24, 0x00	; 0
  46:	90 40       	sbci	r25, 0x00	; 0
  48:	e1 f7       	brne	.-8      	; 0x42 <__SREG__+0x3>
  4a:	00 c0       	rjmp	.+0      	; 0x4c <__SREG__+0xd>
  4c:	00 00       	nop
			_delay_ms(500);
			PORTC |= (1 << 0);
  4e:	a8 9a       	sbi	0x15, 0	; 21
  50:	2f e9       	ldi	r18, 0x9F	; 159
  52:	86 e8       	ldi	r24, 0x86	; 134
  54:	91 e0       	ldi	r25, 0x01	; 1
  56:	21 50       	subi	r18, 0x01	; 1
  58:	80 40       	sbci	r24, 0x00	; 0
  5a:	90 40       	sbci	r25, 0x00	; 0
  5c:	e1 f7       	brne	.-8      	; 0x56 <__SREG__+0x17>
  5e:	00 c0       	rjmp	.+0      	; 0x60 <__SREG__+0x21>
  60:	00 00       	nop
  62:	eb cf       	rjmp	.-42     	; 0x3a <main+0x2>

00000064 <_exit>:
  64:	f8 94       	cli

00000066 <__stop_program>:
  66:	ff cf       	rjmp	.-2      	; 0x66 <__stop_program>
